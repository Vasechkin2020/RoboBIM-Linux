Я обновлю файл G-code (/control_code/my_custom_gcode.txt) и код на C++ для ROS1, чтобы траектория "открытого конверта" с длиной основания 1 метр (1000 мм) и высотой стороны 0,5 метра (500 мм) включала диагонали внутри прямоугольной части конверта. Код будет использовать класс GCodeParser, поддерживать 10 команд (G0, G1, G2, G3, G4, G28, G90, G91, M3, M5), учитывать комментарии в G-code (начинающиеся с ;), читать путь к файлу из launch-файла, использовать фигурные скобки на новых строках и комментарии после строк.
Что добавляем?
Траектория "открытого конверта": Сохраняется прямоугольник (0,0 → 1000,0 → 1000,500 → 0,500) с "клапаном" (вершина в 500,750).
Диагонали: Добавим две диагонали внутри прямоугольника:
От (0,0) к (1000,500).
От (1000,0) к (0,500).
Диагонали будут выполнены после основной траектории конверта, чтобы подчеркнуть их как внутренние элементы.
Обновлённая траектория
Траектория в плоскости XY (координаты в миллиметрах):
Начать в (0,0) — G0 X0 Y0 (нижний левый угол).
Двигаться вправо вдоль основания: G1 X1000 Y0 (нижний правый угол).
Двигаться вверх по правой стороне: G1 X1000 Y500 (верхний правый угол).
Двигаться к вершине клапана: G1 X500 Y750 (центр клапана).
Двигаться к верхнему левому углу: G1 X0 Y500 (верхний левый угол).
Двигаться вниз по левой стороне: G1 X0 Y0 (возврат в начало).
Диагональ 1: G1 X1000 Y500 (от (0,0) к (1000,500)).
Вернуться: G0 X0 Y0 (быстрое перемещение для подготовки ко второй диагонали).
Диагональ 2: G1 X1000 Y0 (от (0,0) к (1000,0)).
Двигаться к (0,500): G1 X0 Y500 (вторая диагональ, от (1000,0) к (0,500)).
Эта траектория рисует "открытый конверт" с прямоугольником, клапаном и двумя диагоналями внутри прямоугольника.
Обновлённый файл G-code (/control_code/my_custom_gcode.txt)
Файл описывает траекторию с комментариями для каждой команды. Координаты в миллиметрах, скорость подачи (F) — 100 мм/мин.
G90 ; Установить абсолютный режим координат
M3 ; Включить шпиндель для начала работы
G0 X0 Y0 ; Быстрое перемещение в начальную точку (0, 0)
G1 X1000 Y0 F100 ; Линейное перемещение вдоль основания к (1000, 0)
G1 X1000 Y500 F100 ; Линейное перемещение вверх к (1000, 500)
G1 X500 Y750 F100 ; Линейное перемещение к вершине клапана (500, 750)
G1 X0 Y500 F100 ; Линейное перемещение к верхнему левому углу (0, 500)
G1 X0 Y0 F100 ; Линейное перемещение вниз к началу (0, 0)
G1 X1000 Y500 F100 ; Линейное перемещение по первой диагонали к (1000, 500)
G0 X0 Y0 ; Быстрое перемещение обратно в (0, 0) для второй диагонали
G1 X1000 Y0 F100 ; Линейное перемещение к (1000, 0)
G1 X0 Y500 F100 ; Линейное перемещение по второй диагонали к (0, 500)
G4 P1000 ; Пауза на 1000 мс перед завершением
M5 ; Выключить шпиндель
G28 ; Возврат в домашнюю позицию (0, 0, 0)
Обновлённый код
Код остаётся почти идентичным предыдущему, но я добавлю логирование пройденной траектории (дистанции между точками) для отладки и подтверждения корректности диагоналей. Проверки на максимальные координаты (X ≤ 1000, Y ≤ 750) сохраняются.
cpp
#include <ros/ros.h> // Подключение ROS
#include <std_msgs/String.h> // Для публикации сообщений
#include <fstream> // Для чтения файла
#include <sstream> // Для разбора строк
#include <vector> // Для хранения команд
#include <string> // Для работы со строками
#include <algorithm> // Для обработки строк (trim)
#include <cmath> // Для вычисления дистанции

// Структура для хранения команды G-code
struct GCodeCommand
{
    std::string command; // Название команды (G0, G1, M3 и т.д.)
    float x, y, z; // Координаты X, Y, Z
    float i, j; // Центр дуги для G2/G3
    float f; // Скорость подачи
    float p; // Длительность паузы для G4
    bool has_x, has_y, has_z, has_i, has_j, has_f, has_p; // Флаги наличия параметров
    std::string comment; // Комментарий к команде
};

// Класс для обработки G-code
class GCodeParser
{
private:
    ros::NodeHandle nh_; // NodeHandle для взаимодействия с ROS
    ros::Publisher pub_; // Паблишер для топика robot_position
    std::vector<GCodeCommand> commands_; // Массив для хранения команд
    bool absolute_mode_; // Режим координат: true — абсолютный, false — относительный
    float current_x_, current_y_, current_z_; // Текущая позиция робота
    std::string gcode_file_; // Путь к файлу G-code
    const float MAX_X_ = 1000.0; // Максимальная координата X
    const float MAX_Y_ = 750.0; // Максимальная координата Y

    // Удаление пробелов в начале и конце строки
    std::string trim(const std::string& str)
    {
        size_t first = str.find_first_not_of(" \t"); // Поиск первого непробельного символа
        size_t last = str.find_last_not_of(" \t"); // Поиск последнего непробельного символа
        if (first == std::string::npos) return ""; // Если строка пуста, вернуть пустую
        return str.substr(first, last - first + 1); // Вырезать подстроку
    }

    // Разбор строки G-code
    bool parseGCodeLine(const std::string& line, GCodeCommand& cmd)
    {
        std::string code_part = line; // Часть строки с кодом
        cmd = GCodeCommand(); // Инициализация структуры
        cmd.has_x = cmd.has_y = cmd.has_z = cmd.has_i = cmd.has_j = cmd.has_f = cmd.has_p = false; // Сброс флагов

        // Поиск комментария (начинается с ';')
        size_t comment_pos = line.find(';'); // Позиция начала комментария
        if (comment_pos != std::string::npos)
        {
            cmd.comment = trim(line.substr(comment_pos + 1)); // Сохранение комментария
            code_part = trim(line.substr(0, comment_pos)); // Код до комментария
        }
        else
        {
            cmd.comment = ""; // Комментарий отсутствует
            code_part = trim(line); // Код — вся строка
        }

        if (code_part.empty()) return false; // Пропуск пустых строк

        std::stringstream ss(code_part); // Поток для разбора кода
        std::string token; // Для хранения токена
        ss >> token; // Чтение команды (G0, G1 и т.д.)
        if (token.empty() || (token[0] != 'G' && token[0] != 'M')) return false; // Проверка валидности
        cmd.command = token; // Сохранение команды

        while (ss >> token)
        {
            char param = token[0]; // Тип параметра (X, Y, Z и т.д.)
            try
            {
                float value = std::stof(token.substr(1)); // Преобразование в число
                if (param == 'X')
                {
                    if (value < 0 || value > MAX_X_) throw std::invalid_argument("Координата X вне диапазона"); // Проверка
                    cmd.x = value; cmd.has_x = true; // Сохранение X
                }
                else if (param == 'Y')
                {
                    if (value < 0 || value > MAX_Y_) throw std::invalid_argument("Координата Y вне диапазона"); // Проверка
                    cmd.y = value; cmd.has_y = true; // Сохранение Y
                }
                else if (param == 'Z')
                {
                    if (value < 0) throw std::invalid_argument("Отрицательная координата Z"); // Проверка
                    cmd.z = value; cmd.has_z = true; // Сохранение Z
                }
                else if (param == 'I')
                {
                    cmd.i = value; cmd.has_i = true; // Сохранение I
                }
                else if (param == 'J')
                {
                    cmd.j = value; cmd.has_j = true; // Сохранение J
                }
                else if (param == 'F')
                {
                    if (value <= 0) throw std::invalid_argument("Некорректная скорость F"); // Проверка
                    cmd.f = value; cmd.has_f = true; // Сохранение F
                }
                else if (param == 'P')
                {
                    if (value < 0) throw std::invalid_argument("Отрицательная пауза P"); // Проверка
                    cmd.p = value; cmd.has_p = true; // Сохранение P
                }
            }
            catch (const std::exception& e)
            {
                ROS_WARN("Ошибка разбора параметра в строке: %s (%s)", line.c_str(), e.what()); // Лог ошибки
                return false; // Возврат при ошибке
            }
        }
        return true; // Успешный разбор
    }

    // Публикация сообщения в топик
    void publishMessage(const std::string& message)
    {
        std_msgs::String msg; // Создание сообщения
        msg.data = message; // Заполнение сообщения
        pub_.publish(msg); // Публикация
    }

    // Вычисление дистанции между текущей и новой позицией
    float calculateDistance(float new_x, float new_y, float new_z)
    {
        float dx = new_x - current_x_; // Разница по X
        float dy = new_y - current_y_; // Разница по Y
        float dz = new_z - current_z_; // Разница по Z
        return std::sqrt(dx * dx + dy * dy + dz * dz); // Евклидова дистанция
    }

    // Выполнение G0 (быстрое перемещение)
    void executeG0(const GCodeCommand& cmd)
    {
        std::stringstream ss; // Для формирования лога
        float new_x = cmd.has_x ? cmd.x : current_x_; // Новая координата X
        float new_y = cmd.has_y ? cmd.y : current_y_; // Новая координата Y
        float new_z = cmd.has_z ? cmd.z : current_z_; // Новая координата Z
        if (absolute_mode_)
        {
            current_x_ = new_x; // Обновление X
            current_y_ = new_y; // Обновление Y
            current_z_ = new_z; // Обновление Z
        }
        else
        {
            current_x_ += cmd.has_x ? cmd.x : 0.0; // Относительное смещение X
            current_y_ += cmd.has_y ? cmd.y : 0.0; // Относительное смещение Y
            current_z_ += cmd.has_z ? cmd.z : 0.0; // Относительное смещение Z
        }
        ss << "G0: Быстрое перемещение к X=" << current_x_ << " Y=" << current_y_ << " Z=" << current_z_;
        if (!cmd.comment.empty()) ss << " (" << cmd.comment << ")"; // Добавление комментария
        ROS_INFO("%s", ss.str().c_str()); // Вывод лога
        publishMessage(ss.str()); // Публикация
    }

    // Выполнение G1 (линейное перемещение)
    void executeG1(const GCodeCommand& cmd)
    {
        std::stringstream ss; // Для формирования лога
        float feed_rate = cmd.has_f ? cmd.f : 100.0; // Скорость подачи, по умолчанию 100
        float new_x = cmd.has_x ? cmd.x : current_x_; // Новая координата X
        float new_y = cmd.has_y ? cmd.y : current_y_; // Новая координата Y
        float new_z = cmd.has_z ? cmd.z : current_z_; // Новая координата Z
        if (absolute_mode_)
        {
            current_x_ = new_x; // Обновление X
            current_y_ = new_y; // Обновление Y
            current_z_ = new_z; // Обновление Z
        }
        else
        {
            current_x_ += cmd.has_x ? cmd.x : 0.0; // Относительное смещение X
            current_y_ += cmd.has_y ? cmd.y : 0.0; // Относительное смещение Y
            current_z_ += cmd.has_z ? cmd.z : 0.0; // Относительное смещение Z
        }
        float distance = calculateDistance(new_x, new_y, new_z); // Вычисление дистанции
        ss << "G1: Линейное перемещение к X=" << current_x_ << " Y=" << current_y_ << " Z=" << current_z_ << " F=" << feed_rate;
        ss << ", дистанция=" << distance << " мм";
        if (!cmd.comment.empty()) ss << " (" << cmd.comment << ")"; // Добавление комментария
        ROS_INFO("%s", ss.str().c_str()); // Вывод лога
        publishMessage(ss.str()); // Публикация
    }

    // Выполнение G2 (дуга по часовой стрелке)
    void executeG2(const GCodeCommand& cmd)
    {
        std::stringstream ss; // Для формирования лога
        float center_i = cmd.has_i ? cmd.i : 0.0; // Смещение центра по X
        float center_j = cmd.has_j ? cmd.j : 0.0; // Смещение центра по Y
        float feed_rate = cmd.has_f ? cmd.f : 100.0; // Скорость подачи
        if (absolute_mode_)
        {
            current_x_ = cmd.has_x ? cmd.x : current_x_; // Обновление X
            current_y_ = cmd.has_y ? cmd.y : current_y_; // Обновление Y
        }
        else
        {
            current_x_ += cmd.has_x ? cmd.x : 0.0; // Относительное смещение X
            current_y_ += cmd.has_y ? cmd.y : 0.0; // Относительное смещение Y
        }
        ss << "G2: Дуга по часовой к X=" << current_x_ << " Y=" << current_y_ << " I=" << center_i << " J=" << center_j << " F=" << feed_rate;
        if (!cmd.comment.empty()) ss << " (" << cmd.comment << ")"; // Добавление комментария
        ROS_INFO("%s", ss.str().c_str()); // Вывод лога
        publishMessage(ss.str()); // Публикация
    }

    // Выполнение G3 (дуга против часовой стрелки)
    void executeG3(const GCodeCommand& cmd)
    {
        std::stringstream ss; // Для формирования лога
        float center_i = cmd.has_i ? cmd.i : 0.0; // Смещение центра по X
        float center_j = cmd.has_j ? cmd.j : 0.0; // Смещение центра по Y
        float feed_rate = cmd.has_f ? cmd.f : 100.0; // Скорость подачи
        if (absolute_mode_)
        {
            current_x_ = cmd.has_x ? cmd.x : current_x_; // Обновление X
            current_y_ = cmd.has_y ? cmd.y : current_y_; // Обновление Y
        }
        else
        {
            current_x_ += cmd.has_x ? cmd.x : 0.0; // Относительное смещение X
            current_y_ += cmd.has_y ? cmd.y : 0.0; // Относительное смещение Y
        }
        ss << "G3: Дуга против часовой к X=" << current_x_ << " Y=" << current_y_ << " I=" << center_i << " J=" << center_j << " F=" << feed_rate;
        if (!cmd.comment.empty()) ss << " (" << cmd.comment << ")"; // Добавление комментария
        ROS_INFO("%s", ss.str().c_str()); // Вывод лога
        publishMessage(ss.str()); // Публикация
    }

    // Выполнение G4 (пауза)
    void executeG4(const GCodeCommand& cmd)
    {
        std::stringstream ss; // Для формирования лога
        float pause_ms = cmd.has_p ? cmd.p : 0.0; // Длительность паузы в мс
        ss << "G4: Пауза на " << pause_ms << " мс";
        if (!cmd.comment.empty()) ss << " (" << cmd.comment << ")"; // Добавление комментария
        ROS_INFO("%s", ss.str().c_str()); // Вывод лога
        ros::Duration(pause_ms / 1000.0).sleep(); // Ожидание
        publishMessage(ss.str()); // Публикация
    }

    // Выполнение G28 (возврат домой)
    void executeG28(const GCodeCommand& cmd)
    {
        std::stringstream ss; // Для формирования лога
        current_x_ = 0.0; // Сброс X
        current_y_ = 0.0; // Сброс Y
        current_z_ = 0.0; // Сброс Z
        ss << "G28: Возврат в домашнюю позицию (0, 0, 0)";
        if (!cmd.comment.empty()) ss << " (" << cmd.comment << ")"; // Добавление комментария
        ROS_INFO("%s", ss.str().c_str()); // Вывод лога
        publishMessage(ss.str()); // Публикация
    }

    // Выполнение G90 (абсолютный режим)
    void executeG90(const GCodeCommand& cmd)
    {
        std::stringstream ss; // Для формирования лога
        absolute_mode_ = true; // Установка абсолютного режима
        ss << "G90: Абсолютный режим координат";
        if (!cmd.comment.empty()) ss << " (" << cmd.comment << ")"; // Добавление комментария
        ROS_INFO("%s", ss.str().c_str()); // Вывод лога
        publishMessage(ss.str()); // Публикация
    }

    // Выполнение G91 (относительный режим)
    void executeG91(const GCodeCommand& cmd)
    {
        std::stringstream ss; // Для формирования лога
        absolute_mode_ = false; // Установка относительного режима
        ss << "G91: Относительный режим координат";
        if (!cmd.comment.empty()) ss << " (" << cmd.comment << ")"; // Добавление комментария
        ROS_INFO("%s", ss.str().c_str()); // Вывод лога
        publishMessage(ss.str()); // Публикация
    }

    // Выполнение M3 (включение шпинделя)
    void executeM3(const GCodeCommand& cmd)
    {
        std::stringstream ss; // Для формирования лога
        ss << "M3: Шпиндель включен";
        if (!cmd.comment.empty()) ss << " (" << cmd.comment << ")"; // Добавление комментария
        ROS_INFO("%s", ss.str().c_str()); // Вывод лога
        publishMessage(ss.str()); // Публикация
    }

    // Выполнение M5 (выключение шпинделя)
    void executeM5(const GCodeCommand& cmd)
    {
        std::stringstream ss; // Для формирования лога
        ss << "M5: Шпиндель выключен";
        if (!cmd.comment.empty()) ss << " (" << cmd.comment << ")"; // Добавление комментария
        ROS_INFO("%s", ss.str().c_str()); // Вывод лога
        publishMessage(ss.str()); // Публикация
    }

public:
    // Конструктор
    GCodeParser() : nh_(), pub_(nh_.advertise<std_msgs::String>("robot_position", 10)),
                    absolute_mode_(true), current_x_(0.0), current_y_(0.0), current_z_(0.0),
                    gcode_file_("/control_code/my_custom_gcode.txt")
    {
        nh_.param<std::string>("gcode_file", gcode_file_, gcode_file_); // Чтение параметра gcode_file
        ROS_INFO("Используется файл G-code: %s", gcode_file_.c_str()); // Вывод пути к файлу
    }

    // Основной метод для выполнения
    void run()
    {
        std::ifstream file(gcode_file_.c_str()); // Открытие файла
        if (!file.is_open())
        {
            ROS_ERROR("Не удалось открыть файл: %s", gcode_file_.c_str()); // Вывод ошибки
            return; // Выход
        }

        std::string line; // Для хранения строки
        while (std::getline(file, line))
        {
            line = trim(line); // Удаление пробелов
            if (line.empty() || line[0] == '%') continue; // Пропуск пустых строк и комментариев
            GCodeCommand cmd; // Создание структуры команды
            if (parseGCodeLine(line, cmd))
            {
                commands_.push_back(cmd); // Добавление команды
                std::string log = "Добавлена команда: " + line;
                if (!cmd.comment.empty()) log += " (" + cmd.comment + ")"; // Добавление комментария
                ROS_INFO("%s", log.c_str()); // Вывод лога
            }
            else
            {
                ROS_WARN("Невалидная строка: %s", line.c_str()); // Предупреждение
            }
        }
        file.close(); // Закрытие файла

        ros::Rate loop_rate(1); // Частота 1 Гц
        for (const auto& cmd : commands_)
        {
            if (cmd.command == "G0") executeG0(cmd); // Выполнение G0
            else if (cmd.command == "G1") executeG1(cmd); // Выполнение G1
            else if (cmd.command == "G2") executeG2(cmd); // Выполнение G2
            else if (cmd.command == "G3") executeG3(cmd); // Выполнение G3
            else if (cmd.command == "G4") executeG4(cmd); // Выполнение G4
            else if (cmd.command == "G28") executeG28(cmd); // Выполнение G28
            else if (cmd.command == "G90") executeG90(cmd); // Выполнение G90
            else if (cmd.command == "G91") executeG91(cmd); // Выполнение G91
            else if (cmd.command == "M3") executeM3(cmd); // Выполнение M3
            else if (cmd.command == "M5") executeM5(cmd); // Выполнение M5
            else ROS_WARN("Неизвестная команда: %s (%s)", cmd.command.c_str(), cmd.comment.c_str()); // Предупреждение
            ros::spinOnce(); // Обработка сообщений
            loop_rate.sleep(); // Пауза
        }

        ROS_INFO("Все команды выполнены"); // Сообщение об окончании
    }
};

int main(int argc, char **argv)
{
    ros::init(argc, argv, "gcode_parser_node"); // Инициализация ROS
    GCodeParser parser; // Создание объекта парсера
    parser.run(); // Запуск обработки
    return 0; // Завершение
}
Launch-файл (launch/gcode_parser.launch)
xml
<launch>
    <!-- Запуск ноды gcode_parser_node -->
    <node name="gcode_parser_node" pkg="gcode_parser" type="gcode_parser_node" output="screen">
        <!-- Параметр для пути к файлу G-code -->
        <param name="gcode_file" value="/control_code/my_custom_gcode.txt" />
    </node>
</launch>
Как работает код:
G-code файл:
Описывает траекторию "открытого конверта" с основанием 1000 мм, высотой 500 мм и клапаном (вершина в (500, 750)).
Добавлены две диагонали: (0,0) → (1000,500) и (1000,0) → (0,500).
Использует абсолютные координаты (G90), линейные перемещения (G1), и включает шпиндель (M3/M5).
Каждая команда сопровождается комментарием с ;.
Код:
Проверяет координаты (X ≤ 1000, Y ≤ 750, Z ≥ 0, F > 0, P ≥ 0).
Логирует дистанцию для G1-команд, чтобы отследить длину линий (например, диагонали имеют длину √(1000² + 500²) ≈ 1118 мм).
Извлекает комментарии (после ;) и включает их в логи.
Публикует состояние в топик /robot_position.
Траектория:
Начинается в (0,0), проходит через (1000,0), (1000,500), (500,750), (0,500), (0,0).
Добавляет диагонали: (0,0) → (1000,500) и (1000,0) → (0,500).
Завершается возвратом в (0,0,0) через G28.
Как запустить:
Создай ROS-пакет:
bash
catkin_create_pkg gcode_parser roscpp std_msgs
Сохрани код в src/gcode_parser_node.cpp.
Обнови CMakeLists.txt:
cmake
add_executable(gcode_parser_node src/gcode_parser_node.cpp)
target_link_libraries(gcode_parser_node ${catkin_LIBRARIES})
Убедись, что в package.xml есть:
xml
<depend>roscpp</depend>
<depend>std_msgs</depend>
Создай папку launch и сохрани launch-файл:
bash
mkdir -p gcode_parser/launch
nano gcode_parser/launch/gcode_parser.launch
Создай G-code файл:
bash
mkdir -p /control_code
nano /control_code/my_custom_gcode.txt
Собери и запусти:
bash
catkin_make
source devel/setup.bash
roslaunch gcode_parser gcode_parser.launch
Следи за логами:
bash
rostopic echo /robot_position
Пример вывода логов:
[INFO] Используется файл G-code: /control_code/my_custom_gcode.txt
[INFO] Добавлена команда: G90 (Установить абсолютный режим координат)
[INFO] Добавлена команда: M3 (Включить шпиндель для начала работы)
[INFO] Добавлена команда: G0 X0 Y0 (Быстрое перемещение в начальную точку (0, 0))
...
[INFO] G90: Абсолютный режим координат (Установить абсолютный режим координат)
[INFO] M3: Шпиндель включен (Включить шпиндель для начала работы)
[INFO] G0: Быстрое перемещение к X=0 Y=0 Z=0 (Быстрое перемещение в начальную точку (0, 0))
[INFO] G1: Линейное перемещение к X=1000 Y=0 Z=0 F=100, дистанция=1000 мм (Линейное перемещение вдоль основания к (1000, 0))
...
[INFO] G1: Линейное перемещение к X=1000 Y=500 Z=0 F=100, дистанция=1118.03 мм (Линейное перемещение по первой диагонали к (1000, 500))
...
[INFO] Все команды выполнены
Примечания:
Диагонали добавлены как линии внутри прямоугольника. Если нужно изменить их порядок или добавить другие линии, уточни.
Длина диагоналей (≈1118 мм) подтверждается через calculateDistance, что соответствует √(1000² + 500²).
Код остаётся заглушкой. Для реального робота добавь управление в executeG* и executeM*.
Если нужна визуализация траектории (например, в RViz), я могу добавить публикацию в топик с геометрическими данными.
Если нужны доработки (например, другая конфигурация диагоналей, дополнительные элементы или проверки), дай знать! 😊